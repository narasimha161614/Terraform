provider "aws" {
  region = "us-east-2"
  
}

resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"
  enable_dns_support = true
  enable_dns_hostnames = true

  tags = {
   Name = "Ansible"
 }
}

resource "aws_subnet" "my_subnet" {
  vpc_id = aws_vpc.my_vpc.id
  cidr_block = "10.0.1.0/24"
  availability_zone = "us-east-2a"
  map_public_ip_on_launch = true

  tags = {
   Name = "Ansibe_subnet"
 }
}

resource "aws_internet_gateway" "my_igw" {
  vpc_id = aws_vpc.my_vpc.id

  tags = {
   Name = "Ansible_internet"
 }
}

resource "aws_route_table" "my_rt" {
  vpc_id = aws_vpc.my_vpc.id
  
  tags = {
   Name = "Ansible_route"
 }
}

resource "aws_route" "internet_access" {
  route_table_id = aws_route_table.my_rt.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.my_igw.id
}

resource "aws_route_table_association" "my_rta" {
  subnet_id = aws_subnet.my_subnet.id
  route_table_id = aws_route_table.my_rt.id
}

resource "aws_security_group" "my_sg" {
  vpc_id = aws_vpc.my_vpc.id
  name = "Mysecuritygroup"

  ingress {
   from_port = 22
   to_port = 22
   protocol = "tcp"
   cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
   from_port = 80
   to_port = 80
   protocol = "tcp"
   cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
   from_port = 81
   to_port = 81
   protocol = "tcp"
   cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
   from_port = 0
   to_port = 0
   protocol = "-1"
   cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_instance" "my_ec2" {
  instance_type = "t2.micro"
  ami = "ami-0efc43a4067fe9a3e"
  subnet_id = aws_subnet.my_subnet.id
  key_name = "ohio"
  vpc_security_group_ids = [aws_security_group.my_sg.id]
  associate_public_ip_address = true
  
  user_data = <<-EOF
    #!/bin/bash
    yum update -y
    amazon-linux-extras enable epel
    yum install -y epel-release
    yum install -y python3 python3-pip
    pip3 install --upgrade pip
    pip3 install ansible
  EOF


  tags = {
   Name = "Ansible_ec2"
 }
}
